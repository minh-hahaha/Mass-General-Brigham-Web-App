// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema
// To push the databases from here to Postgres, use "yarn workspace database push"

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Employee {
  employeeId     Int              @id @default(autoincrement())
  firstName      String
  middleName     String?
  lastName       String
  position       String
  dateHired      DateTime         @default(now()) @db.Date
  serviceRequest ServiceRequest[]
  email          String           @unique
  password       String
  department     Department?      @relation(fields: [departmentId], references: [deptId])
  departmentId   Int?
  admin          Boolean          @default(false)
}

model ServiceRequest {
  requestId             Int       @id @default(autoincrement())
  assignedId            Employee? @relation(fields: [employeeId], references: [employeeId])
  employeeId            Int?
  employeeName          String?
  //this is to satisfy the 9 commandments until we get proper intgration between the locations in the database and the forms
  requesterDepartmentId String?
  requesterRoomNumber   String?

  requestDate      DateTime?         @default(now()) @db.Date
  status           String
  comments         String?
  priority         String
  location         Location?         @relation(name: "ServiceLocation", fields: [locationId], references: [locId])
  locationId       Int?
  serviceType      String
  patientTransport PatientTransport? @relation(name: "ServicePatientTransport")
  requestTime      DateTime?         @default(now()) @db.Time

  translationRequest   TranslationRequest?
  sanitation           Sanitation?           @relation(name: "ServiceSanitation")
  maintenanceRequest   MaintenanceRequest?   @relation(name: "MaintenanceRequest")
  medicalDeviceRequest MedicalDeviceRequest? @relation(name: "MedicalDeviceRequest")
}

model MedicalDeviceRequest {
  servReqId          Int            @id
  servRequestId      ServiceRequest @relation(name: "MedicalDeviceRequest", fields: [servReqId], references: [requestId])
  device             String
  deviceReasoning    String
  deviceSerialNumber String
  deviceModel        String?
  location           String
  department         String
}

model MaintenanceRequest {
  servMaintenanceId      Int            @id
  maintenanceType        String
  maintenanceDescription String
  maintenanceHospital    String
  maintenanceLocation    String
  maintenanceTime        DateTime
  // employee_name           String
  servRequestId          ServiceRequest @relation(name: "MaintenanceRequest", fields: [servMaintenanceId], references: [requestId])
}

//TODO: FIX LOCATION FIELDS
model PatientTransport {
  servReqId       Int            @id
  patientId       Int
  patientName     String
  pickupLocation  String
  dropoffLocation String
  transportType   String
  servRequestId   ServiceRequest @relation(name: "ServicePatientTransport", fields: [servReqId], references: [requestId])
}

model TranslationRequest {
  serviceReqId  Int            @id
  servRequestId ServiceRequest @relation(fields: [serviceReqId], references: [requestId])
  patientName   String
  language      String
  duration      Float
  typeMeeting   String
  date          DateTime
  meetingLink   String
  location      String
  department    String //fix it later - Jake
}

model Department {
  deptId       Int        @id @default(autoincrement())
  deptServices String
  deptName     String
  buildingId   Int
  deptPhone    String
  members      Employee[]
  locations    Location[]
  building     Building   @relation(fields: [buildingId], references: [buildingId])
  nodeId       String?
  node         Node?      @relation(fields: [nodeId], references: [id])
}

model Location {
  locId        Int         @id @default(autoincrement())
  department   Department? @relation(fields: [departmentId], references: [deptId])
  departmentId Int?
  locType      String
  roomNum      Int?        @unique
  floor        Int
  nodeId       String?     @unique
  nodeLocation Node?       @relation(fields: [nodeId], references: [id], name: "LocationNode")

  // making prisma happy here
  serviceRequests ServiceRequest[] @relation("ServiceLocation") // unused relation
}

model Building {
  buildingId   Int          @id @default(autoincrement())
  buildingName String
  departments  Department[]
}

model Node {
  // ignore id
  // id         Int     @id @default(autoincrement())
  id          String       @id
  x           Decimal
  y           Decimal
  floor       String
  buildingId  String
  nodeType    String
  name        String
  roomNumber  String?
  edgesFrom   Edge[]       @relation("NodeToEdgeFrom")
  edgesTo     Edge[]       @relation("NodeToEdgeTo")
  departments Department[]
  location    Location?    @relation(name: "LocationNode")
}

model Edge {
  // making prisma happy lol
  id       Int    @id @default(autoincrement())
  from     String
  to       String
  nodeTo   Node   @relation("NodeToEdgeTo", fields: [to], references: [id])
  nodeFrom Node   @relation("NodeToEdgeFrom", fields: [from], references: [id])
}

model Sanitation {
  servReqId              Int            @id
  sanitationLocationId   String
  sanitationDepartmentId String
  sanitationRoomNumber   Int
  sanitationType         String
  recurring              Boolean
  hazardLevel            String
  disposalRequired       Boolean
  completeBy             DateTime       @default(now()) @db.Time
  servRequestId          ServiceRequest @relation(name: "ServiceSanitation", fields: [servReqId], references: [requestId])
}
