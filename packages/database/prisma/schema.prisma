// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema
// To push the databases from here to Postgres, use "yarn workspace database push"

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Employee {
  employeeId     Int              @id @default(autoincrement())
  firstName      String
  middleName     String?
  lastName       String
  position       String
  dateHired      DateTime         @default(now()) @db.Date
  serviceRequest ServiceRequest[]
  email          String           @unique
  password       String
  department     Department?      @relation(fields: [departmentId], references: [deptId])
  departmentId   Int?
  admin          Boolean          @default(false)
}

model ServiceRequest {
  requestId               Int          @id @default(autoincrement())
  requesterDepartmentId   String?
  requesterRoomNumber     String?
  assignedId              Employee?    @relation(fields: [employeeId], references: [employeeId])
  employeeId              Int?
  employeeName            String?
  requestDate             DateTime?    @default(now()) @db.Date
  requestTime             DateTime?    @default(now()) @db.Time
  status                  String
  comments                String?
  priority                String
  serviceType             String

  //Requests
  patientTransport   PatientTransport? @relation(name: "ServicePatientTransport")
  translationRequest TranslationRequest?
  sanitation         Sanitation?         @relation(name: "ServiceSanitation")
  maintenanceRequest MaintenanceRequest? @relation(name: "MaintenanceRequest")
  medicalDeviceRequest MedicalDeviceRequest? @relation("MedicalDeviceRequest")
}

model MaintenanceRequest {
  servMaintenanceId      Int            @id
  maintenanceType        String
  maintenanceDescription String
  maintenanceHospital    String
  maintenanceLocation    String
  maintenanceTime        DateTime
  // employee_name           String
  servRequestId          ServiceRequest @relation(name: "MaintenanceRequest", fields: [servMaintenanceId], references: [requestId])
}

model MedicalDeviceRequest {
  servReqId          Int            @id
  servRequestId      ServiceRequest @relation(name: "MedicalDeviceRequest", fields: [servReqId], references: [requestId])
  device             String
  deviceReasoning    String
  deviceSerialNumber String
  deviceModel        String?
  location           String
  department         String
}

//TODO: FIX LOCATION FIELDS
model PatientTransport {
  servReqId       Int            @id
  patientId       Int
  patientName     String
  pickupLocation  String
  dropoffLocation String
  transportType   String
  servRequestId   ServiceRequest @relation(name: "ServicePatientTransport", fields: [servReqId], references: [requestId])
}

model TranslationRequest {
  serviceReqId  Int            @id
  servRequestId ServiceRequest @relation(fields: [serviceReqId], references: [requestId])
  patientName   String
  language      String
  duration      Float
  typeMeeting   String
  date          DateTime
  meetingLink   String
  location      String
  department    String //fix it later - Jake
}

model Department {
  deptId        Int        @id @default(autoincrement())
  deptServices  String
  deptName      String
  buildingId    Int
  deptPhone     String
  members       Employee[]
  building      Building   @relation(fields: [buildingId], references: [buildingId])
  nodeId        String?
  departmentNodes  Node? @relation(name: "departmentNodes", fields: [nodeId], references: [nodeId])
}

model Building {
  buildingId   Int          @id @default(autoincrement())
  buildingName String
  departments  Department[]
}

model Node {
  nodeId          String  @id //TODO: i'll fix it later
  x           Decimal
  y           Decimal
  floor       String
  buildingId  String
  nodeType    String
  name        String
  roomNumber  String?
  edgesFrom   Edge[]  @relation("NodeToEdgeFrom")
  edgesTo     Edge[]  @relation("NodeToEdgeTo")
  departments Department[] @relation("departmentNodes")

}

model Edge {
  // making prisma happy lol
  edgeId    Int    @id @default(autoincrement())
  from     String
  to       String
  nodeTo   Node   @relation("NodeToEdgeTo", fields: [to], references: [nodeId])
  nodeFrom Node   @relation("NodeToEdgeFrom", fields: [from], references: [nodeId])
}

model Sanitation {
  servReqId                Int            @id
  sanitationLocationId   String
  sanitationDepartmentId String
  sanitationRoomNumber Int
  sanitationType           String
  recurring                Boolean
  hazardLevel              String
  disposalRequired         Boolean
  completeBy               DateTime       @default(now()) @db.Time
  servRequestId           ServiceRequest @relation(name: "ServiceSanitation", fields: [servReqId], references: [requestId])
}

model RecentOrigins {
  id                      Int @id @default(autoincrement())
  location                String
}
